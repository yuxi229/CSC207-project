Index: src/main/data_access/InMemoryLocationDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package data_access;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport entity.*;\nimport use_case.LocationDataAccessInterface;\nimport use_case.navigation.MapLocation;\n\n/**\n * In-memory implementation of the DAO for storing navigation data. This implementation does\n * NOT persist data between runs of the program.\n */\npublic class InMemoryLocationDao implements LocationDataAccessInterface {\n    private final Map<String, AbstractLocation> locationMap = new HashMap<>();\n    private final Map<String, Room> roomCodeToRoom = new HashMap<>();\n    private final Map<String, Floor> floorIdToFloor = new HashMap<>();\n    private final Map<String, Map<String, MapLocation>> mapLocationLookup = new HashMap<>();\n\n    public InMemoryLocationDao() {\n    }\n\n    public InMemoryLocationDao(List<AbstractLocation> locations, List<MapLocation> mapLocations) {\n        loadLocations(locations);\n        loadMapLocations(mapLocations);\n    }\n\n    private void loadLocations(List<AbstractLocation> locations) {\n        for (AbstractLocation location : locations) {\n            // Add location to locationMap\n            locationMap.put(location.getId(), location);\n\n            // Add rooms to roomCodeToRoom\n            if (location instanceof Room) {\n                roomCodeToRoom.put(((Room) location).getRoomCode(), (Room) location);\n            }\n            // Add floors to floorIdToFloor\n            for (Floor floor : location.getFloors()) {\n                if (!floorIdToFloor.containsKey(floor.getFloorId())) {\n                    floorIdToFloor.put(floor.getFloorId(), floor);\n                }\n            }\n        }\n    }\n\n    private void loadMapLocations(List<MapLocation> mapLocations) {\n        for (MapLocation mapLocation : mapLocations) {\n            if (!mapLocationLookup.containsKey(mapLocation.getLocationID())) {\n                mapLocationLookup.put(mapLocation.getLocationID(), new HashMap<>());\n            }\n            mapLocationLookup.get(mapLocation.getLocationID()).put(mapLocation.getFloorID(), mapLocation);\n        }\n    }\n\n    @Override\n    public boolean roomExists(String roomCode) {\n        return roomCodeToRoom.containsKey(roomCode);\n    }\n\n    @Override\n    public boolean idExists(String id) {\n        return locationMap.containsKey(id);\n    }\n\n    @Override\n    public AbstractLocation getLocation(String id) {\n        return locationMap.get(id);\n    }\n\n    @Override\n    public Room getRoom(String roomCode) {\n        return roomCodeToRoom.get(roomCode);\n    }\n\n    @Override\n    public Floor getFloor(String id) {\n        return floorIdToFloor.get(id);\n    }\n\n    @Override\n    public Stairs getStair(String id) {\n        Stairs result;\n        if (locationMap.containsKey(id) && locationMap.get(id) instanceof Stairs) {\n            result = (Stairs) locationMap.get(id);\n        } else {\n            //TODO: Raise an appropriate Error\n            result = null;\n        }\n        return result;\n    }\n\n    @Override\n    public Corridor getCorridor(String id) {\n        Corridor result;\n        if (locationMap.containsKey(id) && locationMap.get(id) instanceof Corridor) {\n            result = (Corridor) locationMap.get(id);\n        } else {\n            //TODO: Raise an appropriate Error\n            result = null;\n        }\n        return result;\n    }\n\n    @Override\n    public List<Floor> getFloors() {\n        return List.copyOf(floorIdToFloor.values());\n    }\n\n    @Override\n    public List<AbstractLocation> getLocations() {\n        return List.copyOf(locationMap.values());\n    }\n\n    @Override\n    public MapLocation getMapLocation(String id, String floorID) {\n        return mapLocationLookup.get(id).get(floorID);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/data_access/InMemoryLocationDao.java b/src/main/data_access/InMemoryLocationDao.java
--- a/src/main/data_access/InMemoryLocationDao.java	(revision 1b9559e28226fdbbe6b31bf150f4a2b68cfc5e88)
+++ b/src/main/data_access/InMemoryLocationDao.java	(date 1732644168769)
@@ -29,7 +29,7 @@
     private void loadLocations(List<AbstractLocation> locations) {
         for (AbstractLocation location : locations) {
             // Add location to locationMap
-            locationMap.put(location.getId(), location);
+//            locationMap.put(location.getId(newName), location);
 
             // Add rooms to roomCodeToRoom
             if (location instanceof Room) {
Index: .idea/jarRepositories.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/jarRepositories.xml b/.idea/jarRepositories.xml
new file mode 100644
--- /dev/null	(date 1732644197387)
+++ b/.idea/jarRepositories.xml	(date 1732644197387)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RemoteRepositoriesConfiguration">
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Central Repository" />
+      <option name="url" value="https://repo.maven.apache.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Maven Central repository" />
+      <option name="url" value="https://repo1.maven.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="jboss.community" />
+      <option name="name" value="JBoss Community repository" />
+      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
+    </remote-repository>
+  </component>
+</project>
\ No newline at end of file
Index: src/test/navigation/NavigationInteractorTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package use_case.navigation;\n\nimport data_access.InMemoryRoomDataAccessObject;\nimport use_case.LocationDataAccessInterface;\nimport entity.Room;\nimport entity.RoomFactory;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NavigationInteractorTest {\n    @Test\n    void successTest() {\n        NavigationInputData inputData = new NavigationInputData(\"1100\",  \"1130\");\n        LocationDataAccessInterface roomRepository = new InMemoryRoomDataAccessObject();\n\n        // For the success test, we need to add room \"1100\" to the data access repository before we input rooms.\n        RoomFactory factory = new RoomFactory();\n        Room room = factory.create(\"1100\");\n        roomRepository.save(room);\n\n        // This creates a successPresenter that tests whether the test case is as we expect.\n        NavigationOutputBoundary successPresenter = new NavigationOutputBoundary() {\n            @Override\n            public void prepareSuccessView(NavigationOutputData user) {\n                assertEquals(\"1100\", room.getRoomCode());\n            }\n\n            @Override\n            public void prepareFailView(String error) {\n                fail(\"Use case failure is unexpected.\");\n            }\n        };\n\n        NavigationInputBoundary interactor = new NavigationInteractor(roomRepository, successPresenter);\n        interactor.execute(inputData);\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/navigation/NavigationInteractorTest.java b/src/test/navigation/NavigationInteractorTest.java
--- a/src/test/navigation/NavigationInteractorTest.java	(revision 1b9559e28226fdbbe6b31bf150f4a2b68cfc5e88)
+++ b/src/test/navigation/NavigationInteractorTest.java	(date 1732644166789)
@@ -1,6 +1,5 @@
 package use_case.navigation;
 
-import data_access.InMemoryRoomDataAccessObject;
 import use_case.LocationDataAccessInterface;
 import entity.Room;
 import entity.RoomFactory;
@@ -12,12 +11,12 @@
     @Test
     void successTest() {
         NavigationInputData inputData = new NavigationInputData("1100",  "1130");
-        LocationDataAccessInterface roomRepository = new InMemoryRoomDataAccessObject();
+//        LocationDataAccessInterface roomRepository = new InMemoryRoomDataAccessObject();
 
         // For the success test, we need to add room "1100" to the data access repository before we input rooms.
         RoomFactory factory = new RoomFactory();
         Room room = factory.create("1100");
-        roomRepository.save(room);
+//        roomRepository.save(room);
 
         // This creates a successPresenter that tests whether the test case is as we expect.
         NavigationOutputBoundary successPresenter = new NavigationOutputBoundary() {
@@ -32,8 +31,8 @@
             }
         };
 
-        NavigationInputBoundary interactor = new NavigationInteractor(roomRepository, successPresenter);
-        interactor.execute(inputData);
+//        NavigationInputBoundary interactor = new NavigationInteractor(roomRepository, successPresenter);
+//        interactor.execute(inputData);
     }
 
 }
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
new file mode 100644
--- /dev/null	(date 1732644197385)
+++ b/.idea/compiler.xml	(date 1732644197385)
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <annotationProcessing>
+      <profile name="Maven default annotation processors profile" enabled="true">
+        <sourceOutputDir name="target/generated-sources/annotations" />
+        <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
+        <outputRelativeToContentRoot value="true" />
+        <module name="csc207-project" />
+      </profile>
+    </annotationProcessing>
+    <bytecodeTargetLevel>
+      <module name="homework-5" target="11" />
+    </bytecodeTargetLevel>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1732644197386)
+++ b/.idea/misc.xml	(date 1732644197386)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ExternalStorageConfigurationManager" enabled="true" />
+  <component name="MavenProjectsManager">
+    <option name="originalFiles">
+      <list>
+        <option value="$PROJECT_DIR$/pom.xml" />
+      </list>
+    </option>
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_22" default="true" project-jdk-name="openjdk-22" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1732644197387)
+++ b/.idea/vcs.xml	(date 1732644197387)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/encodings.xml b/.idea/encodings.xml
new file mode 100644
--- /dev/null	(date 1732644197387)
+++ b/.idea/encodings.xml	(date 1732644197387)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Encoding">
+    <file url="file://$PROJECT_DIR$/src/main/java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/src/main/resources" charset="UTF-8" />
+  </component>
+</project>
\ No newline at end of file
diff --git a/src/main/entity/User.java b/src/main/resources/User.java
rename from src/main/entity/User.java
rename to src/main/resources/User.java
